// Code generated by MockGen. DO NOT EDIT.
// Source: process.go

// Package repository is a generated GoMock package.
package repository

import (
	db "github.com/eggsbenjamin/square_enix/internal/app/db"
	models "github.com/eggsbenjamin/square_enix/internal/app/models"
	repository "github.com/eggsbenjamin/square_enix/internal/app/repository"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockProcessRepository is a mock of ProcessRepository interface
type MockProcessRepository struct {
	ctrl     *gomock.Controller
	recorder *MockProcessRepositoryMockRecorder
}

// MockProcessRepositoryMockRecorder is the mock recorder for MockProcessRepository
type MockProcessRepositoryMockRecorder struct {
	mock *MockProcessRepository
}

// NewMockProcessRepository creates a new mock instance
func NewMockProcessRepository(ctrl *gomock.Controller) *MockProcessRepository {
	mock := &MockProcessRepository{ctrl: ctrl}
	mock.recorder = &MockProcessRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockProcessRepository) EXPECT() *MockProcessRepositoryMockRecorder {
	return m.recorder
}

// CreateNewProcess mocks base method
func (m *MockProcessRepository) CreateNewProcess() (models.Process, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNewProcess")
	ret0, _ := ret[0].(models.Process)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNewProcess indicates an expected call of CreateNewProcess
func (mr *MockProcessRepositoryMockRecorder) CreateNewProcess() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNewProcess", reflect.TypeOf((*MockProcessRepository)(nil).CreateNewProcess))
}

// UpdateProcess mocks base method
func (m *MockProcessRepository) UpdateProcess(arg0 models.Process) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProcess", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateProcess indicates an expected call of UpdateProcess
func (mr *MockProcessRepositoryMockRecorder) UpdateProcess(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProcess", reflect.TypeOf((*MockProcessRepository)(nil).UpdateProcess), arg0)
}

// GetByStatus mocks base method
func (m *MockProcessRepository) GetByStatus(status string) ([]models.Process, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByStatus", status)
	ret0, _ := ret[0].([]models.Process)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByStatus indicates an expected call of GetByStatus
func (mr *MockProcessRepositoryMockRecorder) GetByStatus(status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByStatus", reflect.TypeOf((*MockProcessRepository)(nil).GetByStatus), status)
}

// GetLatestProcess mocks base method
func (m *MockProcessRepository) GetLatestProcess() (models.Process, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestProcess")
	ret0, _ := ret[0].(models.Process)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestProcess indicates an expected call of GetLatestProcess
func (mr *MockProcessRepositoryMockRecorder) GetLatestProcess() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestProcess", reflect.TypeOf((*MockProcessRepository)(nil).GetLatestProcess))
}

// MockProcessRepositoryFactory is a mock of ProcessRepositoryFactory interface
type MockProcessRepositoryFactory struct {
	ctrl     *gomock.Controller
	recorder *MockProcessRepositoryFactoryMockRecorder
}

// MockProcessRepositoryFactoryMockRecorder is the mock recorder for MockProcessRepositoryFactory
type MockProcessRepositoryFactoryMockRecorder struct {
	mock *MockProcessRepositoryFactory
}

// NewMockProcessRepositoryFactory creates a new mock instance
func NewMockProcessRepositoryFactory(ctrl *gomock.Controller) *MockProcessRepositoryFactory {
	mock := &MockProcessRepositoryFactory{ctrl: ctrl}
	mock.recorder = &MockProcessRepositoryFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockProcessRepositoryFactory) EXPECT() *MockProcessRepositoryFactoryMockRecorder {
	return m.recorder
}

// CreateProcessRepository mocks base method
func (m *MockProcessRepositoryFactory) CreateProcessRepository(db db.Querier) repository.ProcessRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProcessRepository", db)
	ret0, _ := ret[0].(repository.ProcessRepository)
	return ret0
}

// CreateProcessRepository indicates an expected call of CreateProcessRepository
func (mr *MockProcessRepositoryFactoryMockRecorder) CreateProcessRepository(db interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProcessRepository", reflect.TypeOf((*MockProcessRepositoryFactory)(nil).CreateProcessRepository), db)
}
