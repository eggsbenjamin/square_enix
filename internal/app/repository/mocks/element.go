// Code generated by MockGen. DO NOT EDIT.
// Source: element.go

// Package repository is a generated GoMock package.
package repository

import (
	db "github.com/eggsbenjamin/square_enix/internal/app/db"
	models "github.com/eggsbenjamin/square_enix/internal/app/models"
	repository "github.com/eggsbenjamin/square_enix/internal/app/repository"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
	time "time"
)

// MockElementRepository is a mock of ElementRepository interface
type MockElementRepository struct {
	ctrl     *gomock.Controller
	recorder *MockElementRepositoryMockRecorder
}

// MockElementRepositoryMockRecorder is the mock recorder for MockElementRepository
type MockElementRepositoryMockRecorder struct {
	mock *MockElementRepository
}

// NewMockElementRepository creates a new mock instance
func NewMockElementRepository(ctrl *gomock.Controller) *MockElementRepository {
	mock := &MockElementRepository{ctrl: ctrl}
	mock.recorder = &MockElementRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockElementRepository) EXPECT() *MockElementRepositoryMockRecorder {
	return m.recorder
}

// UpdateElementForProcess mocks base method
func (m *MockElementRepository) UpdateElementForProcess(element models.Element, processID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateElementForProcess", element, processID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateElementForProcess indicates an expected call of UpdateElementForProcess
func (mr *MockElementRepositoryMockRecorder) UpdateElementForProcess(element, processID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateElementForProcess", reflect.TypeOf((*MockElementRepository)(nil).UpdateElementForProcess), element, processID)
}

// LockElementsForUpdate mocks base method
func (m *MockElementRepository) LockElementsForUpdate(processID, batchSize int) ([]models.Element, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LockElementsForUpdate", processID, batchSize)
	ret0, _ := ret[0].([]models.Element)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LockElementsForUpdate indicates an expected call of LockElementsForUpdate
func (mr *MockElementRepositoryMockRecorder) LockElementsForUpdate(processID, batchSize interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LockElementsForUpdate", reflect.TypeOf((*MockElementRepository)(nil).LockElementsForUpdate), processID, batchSize)
}

// GetElementsByProcessID mocks base method
func (m *MockElementRepository) GetElementsByProcessID(processID int) ([]models.Element, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetElementsByProcessID", processID)
	ret0, _ := ret[0].([]models.Element)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetElementsByProcessID indicates an expected call of GetElementsByProcessID
func (mr *MockElementRepositoryMockRecorder) GetElementsByProcessID(processID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetElementsByProcessID", reflect.TypeOf((*MockElementRepository)(nil).GetElementsByProcessID), processID)
}

// GetElementsCreatedBefore mocks base method
func (m *MockElementRepository) GetElementsCreatedBefore(date time.Time) ([]models.Element, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetElementsCreatedBefore", date)
	ret0, _ := ret[0].([]models.Element)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetElementsCreatedBefore indicates an expected call of GetElementsCreatedBefore
func (mr *MockElementRepositoryMockRecorder) GetElementsCreatedBefore(date interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetElementsCreatedBefore", reflect.TypeOf((*MockElementRepository)(nil).GetElementsCreatedBefore), date)
}

// MockElementRepositoryFactory is a mock of ElementRepositoryFactory interface
type MockElementRepositoryFactory struct {
	ctrl     *gomock.Controller
	recorder *MockElementRepositoryFactoryMockRecorder
}

// MockElementRepositoryFactoryMockRecorder is the mock recorder for MockElementRepositoryFactory
type MockElementRepositoryFactoryMockRecorder struct {
	mock *MockElementRepositoryFactory
}

// NewMockElementRepositoryFactory creates a new mock instance
func NewMockElementRepositoryFactory(ctrl *gomock.Controller) *MockElementRepositoryFactory {
	mock := &MockElementRepositoryFactory{ctrl: ctrl}
	mock.recorder = &MockElementRepositoryFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockElementRepositoryFactory) EXPECT() *MockElementRepositoryFactoryMockRecorder {
	return m.recorder
}

// CreateElementRepository mocks base method
func (m *MockElementRepositoryFactory) CreateElementRepository(db db.Querier) repository.ElementRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateElementRepository", db)
	ret0, _ := ret[0].(repository.ElementRepository)
	return ret0
}

// CreateElementRepository indicates an expected call of CreateElementRepository
func (mr *MockElementRepositoryFactoryMockRecorder) CreateElementRepository(db interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateElementRepository", reflect.TypeOf((*MockElementRepositoryFactory)(nil).CreateElementRepository), db)
}
