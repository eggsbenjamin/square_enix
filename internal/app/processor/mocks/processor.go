// Code generated by MockGen. DO NOT EDIT.
// Source: processor.go

// Package processor is a generated GoMock package.
package processor

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockProcessor is a mock of Processor interface
type MockProcessor struct {
	ctrl     *gomock.Controller
	recorder *MockProcessorMockRecorder
}

// MockProcessorMockRecorder is the mock recorder for MockProcessor
type MockProcessorMockRecorder struct {
	mock *MockProcessor
}

// NewMockProcessor creates a new mock instance
func NewMockProcessor(ctrl *gomock.Controller) *MockProcessor {
	mock := &MockProcessor{ctrl: ctrl}
	mock.recorder = &MockProcessorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockProcessor) EXPECT() *MockProcessorMockRecorder {
	return m.recorder
}

// Start mocks base method
func (m *MockProcessor) Start() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start
func (mr *MockProcessorMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockProcessor)(nil).Start))
}

// Pause mocks base method
func (m *MockProcessor) Pause() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Pause")
	ret0, _ := ret[0].(error)
	return ret0
}

// Pause indicates an expected call of Pause
func (mr *MockProcessorMockRecorder) Pause() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pause", reflect.TypeOf((*MockProcessor)(nil).Pause))
}

// RunningProcessExists mocks base method
func (m *MockProcessor) RunningProcessExists() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunningProcessExists")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RunningProcessExists indicates an expected call of RunningProcessExists
func (mr *MockProcessorMockRecorder) RunningProcessExists() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunningProcessExists", reflect.TypeOf((*MockProcessor)(nil).RunningProcessExists))
}

// ProcessBatch mocks base method
func (m *MockProcessor) ProcessBatch(batchSize int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessBatch", batchSize)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProcessBatch indicates an expected call of ProcessBatch
func (mr *MockProcessorMockRecorder) ProcessBatch(batchSize interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessBatch", reflect.TypeOf((*MockProcessor)(nil).ProcessBatch), batchSize)
}

// GetLatestsStat mocks base method
func (m *MockProcessor) GetLatestsStat() (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestsStat")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestsStat indicates an expected call of GetLatestsStat
func (mr *MockProcessorMockRecorder) GetLatestsStat() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestsStat", reflect.TypeOf((*MockProcessor)(nil).GetLatestsStat))
}
